#!/bin/bash
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# Author:  Jonas Bernoulli <jonas@bernoul.li>
# Created: 20090924
# Updated: 20110116
#
# Commentary:
#   List portage profiles and optionally config files.

version="007"

usage() {
    cat <<EOF
Usage: profile-tree [-c[=REGEXP]] [PROFILE]

List portage profiles in a tree-like format.

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -c=[regexp]           also list contents of profiles.  If REGEXP
                        is set only show files whose filename
                        relative to the current profile match REGEXP.
  profile               the profile to be shown (defaults /etc/portage)

For more information see profile-tree(1).

PLEASE NOTE: profile-tree only works with Funtoo's version of portage.
At the time of writing it even assumes you are using the unreleased beta
version.  Since portage is currently undergoing heavy refactoring the
output of profile-tree might stop being in sync with how portage handles
it's profiles and it's config files.  These are exiting times!
EOF
}

set -o nounset
set -o errexit

profile_base=$(portageq envvar PORTDIR)/profiles

regexp="^(\
eapi|\
make\.defaults|\
packages(\.build)?|\
package\.((accept_)?keywords|mask|provided|unmask|use)(/.*)?|\
package\.use\.(force|mask)|\
profile\.bashrc|\
use\.(force|mask)|\
virtuals\
)$"

seen=
verbose=

is_dublicate() {
    for s in $seen
    do
        [ "$1" = "$s" ] && return 0
    done
    return 1
}

walk() {
    local profile_path=$1
    local profile=$(
        echo $profile_path |
        sed -e "s|/usr/portage/profiles/|:|" -e "s|/etc/portage/profiles/||")
    local content=$(
        cd $profile_path;
        find . -maxdepth 2 -type f | sort |
        sed -e "s|^\./||" | grep -E "$regexp")
    local dpr=

    [ -e "$1/deprecated" ] && dpr=" DEPRECATED"

    if is_dublicate $profile
    then
        printf "%$2s%s%d DUBLICATE\n" "" $profile $dpr
    elif [ -n "$verbose" ]
    then
        printf "%$2s%s%s\n" "" $profile $dpr
        for c in $content
        do
            printf "%$(expr $2 + 4)s| %s\n" "" "$c"
        done
    elif [ -n "$content" ]
    then
        printf "%$2s%s%s\n" "" $profile $dpr
    else
        printf "%$2s(%s)%s\n" "" $profile $dpr
    fi

    seen="$seen $profile"

    if [ -e $profile_path/parent ]
    then
        while read parent
        do
            if [[ ${parent:0:1} = "#" || -z "$parent" ]]
            then
                continue
            elif [[ ${parent:0:1} = ":" ]]
            then
                parent=$profile_base/${parent:1}
            else
                parent=$(readlink -f $profile_path/$parent)
            fi

            walk $parent $(expr $2 + 2)

        done < <(tac $1/parent) || true
    fi
}

while (( $# > 0 ))
do
    case $1 in
    -h|--help)
        usage
        exit
        ;;
    --version)
        echo "profile-tree-$version"
        exit
        ;;
    -c=*)
        verbose="true"
        regexp=${1#-c=}
        ;;
    -c)
        verbose="true"
        ;;
    -*)
        echo "profile-tree: error: no such option: $1"
        exit 1
        ;;
    *)
        profile=$1
        break
    esac
    shift
done

walk ${profile:-"/etc/portage"} 0

echo /usr/portage/profiles
if [ -n "$verbose" ]
then
    for f in /usr/portage/profiles/*
    do
        [ -f $f ] && echo "    | $(basename $f)"
    done

    echo /usr/share/portage/config/make.globals
fi
