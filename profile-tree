#!/bin/bash
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# Author:  Jonas Bernoulli <jonas@bernoul.li>
# Created: 20090924
# Updated: 20110209
#
# Commentary:
#   List portage profiles and optionally config files.

version="0.1.0"

usage() {
    cat <<EOF
Usage: profile-tree [-c[=REGEXP]] [PROFILE]

List portage profiles and other portage config files.

Options:
  --version             show version information and exit
  -h, --help            show this help message and exit
  -c[=REGEXP]           show config files within and outside of
                        profiles.  If REGEXP show matching files
                        instead.
  PROFILE               the profile to be shown along with the profiles
                        it inherits from (defaults to /etc/portage)

For more information see profile-tree(1).

PLEASE NOTE: profile-tree only works with Funtoo's version of portage.
At the time of writing it even assumes you are using the unreleased beta
version.  Since portage is currently undergoing heavy refactoring the
output of profile-tree might stop being in sync with how portage handles
it's profiles and it's config files.  These are exiting times!
EOF
}

set -o nounset
set -o errexit

source /etc/profile-tree.conf

seen=
verbose=
regexp=

is_dublicate() {
    for s in $seen
    do
        [ "$1" = "$s" ] && return 0
    done
    return 1
}

walk() {
    local profile_path=$1

    local profile=
    local profile_regexp=
    case $profile_path in
    $profile_user*)
        profile=$(echo $profile_path | sed -e "s|$profile_user/||")
        profile_regexp=$profile_user_regexp
        ;;
    *)
        profile=$(echo $profile_path | sed -e "s|$profile_base/|:|")
        profile_regexp=$profile_dist_regexp
    esac
    [ -n "$regexp" ] && profile_regexp=$regexp

    local content=$(
        find $profile_path -follow -type f | sort |
        sed -e "s:^$profile_path/::" | grep -E "^$profile_regexp$")

    local dpr=
    [ -e "$1/deprecated" ] && dpr=" DEPRECATED"

    if is_dublicate $profile
    then
        printf "%$2s%s/%d DUBLICATE\n" "" $profile $dpr
    elif [ -n "$verbose" ]
    then
        printf "%$2s%s/%s\n" "" $profile $dpr
        for c in $content
        do
            printf "%$(expr $2 + 4)s| %s\n" "" "$c"
        done
    elif [ -n "$content" ]
    then
        printf "%$2s%s/%s\n" "" $profile $dpr
    else
        printf "%$2s(%s/)%s\n" "" $profile $dpr
    fi

    seen="$seen $profile"

    if [ -e $profile_path/parent ]
    then
        while read parent
        do
            if [[ ${parent:0:1} = "#" || -z "$parent" ]]
            then
                continue
            elif [[ ${parent:0:1} = ":" ]]
            then
                parent=$profile_base/${parent:1}
            else
                parent=$(readlink -f $profile_path/$parent)
            fi

            walk $parent $(expr $2 + 2)

        done < <(tac $1/parent) || true
    fi
}

while (( $# > 0 ))
do
    case $1 in
    -h|--help)
        usage
        exit
        ;;
    --version)
        echo "profile-tree-$version"
        exit
        ;;
    -c=*)
        verbose="true"
        regexp=${1#-c=}
        ;;
    -c)
        verbose="true"
        ;;
    -*)
        echo "profile-tree: error: no such option: $1"
        exit 1
        ;;
    *)
        profile=$1
        break
    esac
    shift
done

walk ${profile:-$profile_user} 0

echo $profile_base/
if [ -n "$verbose" ]
then
    find $profile_base -follow -type f | sort |
    sed -e "s:^$profile_base/::" |
    grep -E "^${regexp:-$profile_base_regexp}$" |

    [ -e $portage_globals ] &&
    echo "make.globals" | grep -q -E "^${regexp:-make.globals}$" &&
    echo $portage_globals
fi

echo $portage_varlib/
if [ -n "$verbose" ]
then
    find $portage_varlib -type f | sort |
    sed -e "s:^$portage_varlib/::" |
    grep -E "${regexp:-$portage_libvar_regexp}$" |
    sed -e "s:^:    | :" || true
fi
