#!/usr/bin/python
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# Author:  Jonas Bernoulli <jonas@bernoul.li>
# Created: 20090909
# Updated: 20100707
#
# Commentary:
#   List files not owned by any package.

# TODO check for unnecessary entries in config file
# TODO convert relative paths to absolute

version="005_pre"

import os.path
import sys
import re
from subprocess import Popen, PIPE
from optparse import OptionParser

from portage import settings
from portage.util import ConfigProtect
from gentoolkit.helpers import FileOwner
from gentoolkit.package import Package

def get_find_args(cfile, nolinks, cmask, paths=[]):
    args = paths
    if nolinks:
        args += ["-type", "l", "-o"]
    if cfile:
        mode = None
        with open(cfile, "r") as f:
            for line in f:
                line = line.split("#")[0].strip()
                if line == "":
                    continue
                set_mode = re.match(r"\[mode (.+)\]", line)
                if set_mode:
                    mode = set_mode.group(1)
                elif mode == "prune":
                    args += ["-path", line, "-prune", "-o"]
                else:
                    args += ["-" + mode, line, "-o"]
    for m in cmask:
        args += ["-path", line, "-prune", "-o"]
    args += ["-type", "d", "-o", "-print"]
    return args

if __name__ == "__main__":
    parser = OptionParser(
        usage="%prog [options] [path]...",
        version="%prog-"+version,
        description="List files not owned by any package.",
        epilog="For more information see elone(1).")
    parser.add_option(
        "-e", "--exclude",
        action="store", metavar="FILE", dest="file",
        help="load exclude rules from FILE instead of the default /etc/elone.conf")
    parser.add_option(
        "-n", "--no-exclude",
        action="store_true", dest="noexclude", default=False,
        help="ignore exclude rules")
    parser.add_option(
        "-l", "--no-links",
        action="store_true", dest="nolinks", default=False,
        help="exclude symlinks")
    parser.add_option(
        "-p", "--protected",
        action="store_true", default=False,
        help="only include config protected files")

    options, paths = parser.parse_args()
    find_args = []
    cmask = []

    if options.protected:
        if len(paths) > 0:
            parser.error("option -p and argument PATH are mutually exclusive")
        paths = settings.get("CONFIG_PROTECT", "").split()
        cmask = settings.get("CONFIG_PROTECT_MASK", "").split()

    if options.noexclude:
        if options.file:
            parser.error("options -e and -n are mutually exclusive")
    else:
        if not options.file:
            options.file = "/etc/elone.conf"

    find_args = get_find_args(options.file, options.nolinks, cmask, paths)
    find = Popen(["find"] + find_args, stdout=PIPE)
    sort = Popen(["sort"], stdin=find.stdout, stdout=PIPE)
    files, stderrdata = sort.communicate()
    files = files.splitlines()

    findowner = FileOwner(early_out=True)
    for cfile in files:
		# TODO exclude files in vc control directories?
        if not findowner((cfile,)):
            print cfile
